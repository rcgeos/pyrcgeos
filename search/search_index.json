{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pyrcgeos","text":"<p>A python package for interactive mapping.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://rcgeos.github.io/pyrcgeos</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v002-march-20-2023","title":"v.0.0.2 - March 20, 2023","text":"<p>Created a new version increased by one.  Created the documentation website</p>"},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":""},{"location":"common/#pyrcgeos.common.greeting","title":"<code>greeting(name)</code>","text":"<p>Greets the user by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>_type_</code> <p>description</p> required Source code in <code>pyrcgeos/common.py</code> <pre><code>def greeting(name):\n\"\"\"Greets the user by name.\n\n    Args:\n        name (_type_): _description_\n    \"\"\"    \n    print(f\"Hellom {name}\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/rcgeos/pyrcgeos/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pyrcgeos could always use more documentation, whether as part of the official pyrcgeos docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/rcgeos/pyrcgeos/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up pyrcgeos for local development.</p> <ol> <li> <p>Fork the pyrcgeos repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/pyrcgeos.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv pyrcgeos\n$ cd pyrcgeos/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 pyrcgeos tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/rcgeos/pyrcgeos/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#pyrcgeos.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>pyrcgeos/foliumap.py</code> <pre><code>class Map(folium.Map):\n    def __init__(self, center=[40,-100], zoom=2, **kwargs) -&gt; None: \n\"\"\"Create a folium map object\n\n        Args:\n            center (list, optional): _description_. Defaults to [40,-100].\n            zoom (int, optional): _description_. Defaults to 2.\n        \"\"\"        \n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n    def add_tile_layer(self, url, name, attribution =\"\", **kwargs):\n\"\"\"Add a tile layer\n\n        Args:\n            url (_type_): _description_\n            name (_type_): _description_\n            attribution (str, optional): _description_. Defaults to \"\".\n        \"\"\"        \n\n        tile_layer = folium.TileLayer(\n            tiles=url,\n            name=name,\n            attr=attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n\n    def to_streamlit(\n        self,\n        width=None,\n        height=600,\n        scrolling=False,\n        add_layer_control=True,\n        bidirectional=False,\n        **kwargs,\n    ):\n\"\"\"Renders `folium.Figure` or `folium.Map` in a Streamlit app. This method is a static Streamlit Component, meaning, no information is passed back from Leaflet on browser interaction.\n\n        Args:\n            width (int, optional): Width of the map. Defaults to None.\n            height (int, optional): Height of the map. Defaults to 600.\n            scrolling (bool, optional): Whether to allow the map to scroll. Defaults to False.\n            add_layer_control (bool, optional): Whether to add the layer control. Defaults to True.\n            bidirectional (bool, optional): Whether to add bidirectional functionality to the map. The streamlit-folium package is required to use the bidirectional functionality. Defaults to False.\n\n        Raises:\n            ImportError: If streamlit is not installed.\n\n        Returns:\n            streamlit.components: components.html object.\n        \"\"\"\n\n        try:\n            import streamlit.components.v1 as components\n\n            if add_layer_control:\n                self.add_layer_control()\n\n            if bidirectional:\n                from streamlit_folium import st_folium\n\n                output = st_folium(self, width=width, height=height)\n                return output\n            else:\n                # if responsive:\n                #     make_map_responsive = \"\"\"\n                #     &lt;style&gt;\n                #     [title~=\"st.iframe\"] { width: 100%}\n                #     &lt;/style&gt;\n                #     \"\"\"\n                #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n                return components.html(\n                    self.to_html(), width=width, height=height, scrolling=scrolling\n                )\n\n        except Exception as e:\n            raise Exception(e)\n</code></pre>"},{"location":"foliumap/#pyrcgeos.foliumap.Map.__init__","title":"<code>__init__(self, center=[40, -100], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Create a folium map object</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>description. Defaults to [40,-100].</p> <code>[40, -100]</code> <code>zoom</code> <code>int</code> <p>description. Defaults to 2.</p> <code>2</code> Source code in <code>pyrcgeos/foliumap.py</code> <pre><code>def __init__(self, center=[40,-100], zoom=2, **kwargs) -&gt; None: \n\"\"\"Create a folium map object\n\n    Args:\n        center (list, optional): _description_. Defaults to [40,-100].\n        zoom (int, optional): _description_. Defaults to 2.\n    \"\"\"        \n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#pyrcgeos.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Add a tile layer</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>_type_</code> <p>description</p> required <code>attribution</code> <code>str</code> <p>description. Defaults to \"\".</p> <code>''</code> Source code in <code>pyrcgeos/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution =\"\", **kwargs):\n\"\"\"Add a tile layer\n\n    Args:\n        url (_type_): _description_\n        name (_type_): _description_\n        attribution (str, optional): _description_. Defaults to \"\".\n    \"\"\"        \n\n    tile_layer = folium.TileLayer(\n        tiles=url,\n        name=name,\n        attr=attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumap/#pyrcgeos.foliumap.Map.to_streamlit","title":"<code>to_streamlit(self, width=None, height=600, scrolling=False, add_layer_control=True, bidirectional=False, **kwargs)</code>","text":"<p>Renders <code>folium.Figure</code> or <code>folium.Map</code> in a Streamlit app. This method is a static Streamlit Component, meaning, no information is passed back from Leaflet on browser interaction.</p> <p>Parameters:</p> Name Type Description Default <code>width</code> <code>int</code> <p>Width of the map. Defaults to None.</p> <code>None</code> <code>height</code> <code>int</code> <p>Height of the map. Defaults to 600.</p> <code>600</code> <code>scrolling</code> <code>bool</code> <p>Whether to allow the map to scroll. Defaults to False.</p> <code>False</code> <code>add_layer_control</code> <code>bool</code> <p>Whether to add the layer control. Defaults to True.</p> <code>True</code> <code>bidirectional</code> <code>bool</code> <p>Whether to add bidirectional functionality to the map. The streamlit-folium package is required to use the bidirectional functionality. Defaults to False.</p> <code>False</code> <p>Exceptions:</p> Type Description <code>ImportError</code> <p>If streamlit is not installed.</p> <p>Returns:</p> Type Description <code>streamlit.components</code> <p>components.html object.</p> Source code in <code>pyrcgeos/foliumap.py</code> <pre><code>def to_streamlit(\n    self,\n    width=None,\n    height=600,\n    scrolling=False,\n    add_layer_control=True,\n    bidirectional=False,\n    **kwargs,\n):\n\"\"\"Renders `folium.Figure` or `folium.Map` in a Streamlit app. This method is a static Streamlit Component, meaning, no information is passed back from Leaflet on browser interaction.\n\n    Args:\n        width (int, optional): Width of the map. Defaults to None.\n        height (int, optional): Height of the map. Defaults to 600.\n        scrolling (bool, optional): Whether to allow the map to scroll. Defaults to False.\n        add_layer_control (bool, optional): Whether to add the layer control. Defaults to True.\n        bidirectional (bool, optional): Whether to add bidirectional functionality to the map. The streamlit-folium package is required to use the bidirectional functionality. Defaults to False.\n\n    Raises:\n        ImportError: If streamlit is not installed.\n\n    Returns:\n        streamlit.components: components.html object.\n    \"\"\"\n\n    try:\n        import streamlit.components.v1 as components\n\n        if add_layer_control:\n            self.add_layer_control()\n\n        if bidirectional:\n            from streamlit_folium import st_folium\n\n            output = st_folium(self, width=width, height=height)\n            return output\n        else:\n            # if responsive:\n            #     make_map_responsive = \"\"\"\n            #     &lt;style&gt;\n            #     [title~=\"st.iframe\"] { width: 100%}\n            #     &lt;/style&gt;\n            #     \"\"\"\n            #     st.markdown(make_map_responsive, unsafe_allow_html=True)\n            return components.html(\n                self.to_html(), width=width, height=height, scrolling=scrolling\n            )\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install pyrcgeos, run this command in your terminal:</p> <pre><code>pip install pyrcgeos\n</code></pre> <p>This is the preferred method to install pyrcgeos, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for pyrcgeos can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/rcgeos/pyrcgeos\n</code></pre>"},{"location":"pyrcgeos/","title":"pyrcgeos module","text":"<p>Main module.</p>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map","title":"<code> Map            (Map)         </code>","text":"<p>Map class to add Map, basemap, layers and controls</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>ipyleaflet.Map</code> <p>An ipyleaflet map.</p> required Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>class Map(ipyleaflet.Map):\n\"\"\"Map class to add Map, basemap, layers and controls\n\n    Args:\n        ipyleaflet (ipyleaflet.Map): An ipyleaflet map.\n    \"\"\"    \n    def __init__(self, **kwargs) -&gt; None:\n\"\"\"Add center (Lat, Lon), zoom\n\n        Args:\n            center (_type_): _description_\n            zoom (_type_): _description_\n        \"\"\"   \n        if \"center\" not in kwargs:\n            kwargs[\"center\"] = [40, -100]\n\n        if \"zoom\" not in kwargs:\n            kwargs[\"zoom\"] = 4        \n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"]=True\n        super().__init__(**kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n        if \"fullscreen_control\":\n            self.add_fullscreen_control(position=\"topleft\")\n        self.add_draw_control()\n        self.add_search_control(position=\"topleft\")\n        self.add_toolbar(position=\"topright\")\n\n    def add_search_control(self, position=\"topleft\",**kwargs):\n\"\"\"Add Search Control button \n        \"\"\"        \n        if \"url\" not in kwargs:\n            kwargs['url'] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self,**kwargs):\n\"\"\"Adds a draw control to the map.\n        Args: \n            kwargs: Keyword arguments to pass to the draw control\n        \"\"\"        \n        draw_control = ipyleaflet.DrawControl(**kwargs)\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a layers control to the map. \n        Args: \n            kwargs: Keyword arguments to pass to the layers control\n        \"\"\"        \n        layers_control = ipyleaflet.LayersControl(position=position,**kwargs)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Add a fullscreen control to the map\n\n        Args:\n            position (str, optional): _description_. Defaults to \"topleft\".\n        \"\"\"        \n        fullscreen_control=ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution,**kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (_type_): _description_\n            name (_type_): _description_\n            attribution (_type_): _description_\n        \"\"\"        \n        tile_layer = ipyleaflet.TileLayer(\n            url=url,\n            name=name,\n            attribution=attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower()==\"roadmap\":\n            url='http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, attribution='Google Roadmap', **kwargs)\n        elif basemap.lower()==\"satellite\":\n            url='http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, attribution='Google Satellite', **kwargs)\n        else: \n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution,**kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found\")\n    def add_geojson(self, data, name=\"GeoJSON\",**kwargs): \n\"\"\"Adds a GeoJSON layer to the map\n\n        Args:\n            data (dict): The GeoJSON data\n        \"\"\"    \n        if isinstance(data,str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)    \n        geojson = ipyleaflet.GeoJSON(data=data, name=name,**kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name=\"Shapefile\", **kwargs):\n\"\"\"Add a Shapefile layer to the map\n\n        Args:\n            data (str): The Path to the Shapefile\n            name (str, optional): Name of the layer. Defaults to \"Shapefile\".\n        \"\"\"        \n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n        Args:\n            url (str): The URL of the raster layer.\n            name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }, \n            verify=False # Added this to address SSL certificate missing temporarily\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            },\n            verify=False # Added this to address SSL certificate missing temporarily\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n    def add_local_raster(self, filename, name='Local raster', **kwargs):\n        try: \n            import localtileserver\n        except:\n            raise ImportError(\"localtileserver not installed, please install the library using conda or mamba\")\n\n    def add_image(self, url, width, height, position):\n\"\"\"Adds an image to the map\n\n        Args:\n            url (str): The URL of the image\n            width (int): The width of the image\n            height (int): The height of the image\n            position (list): The position of the image\n        \"\"\"        \n        image = ipyleaflet.ImageOverlay(\n            url=url,\n            bounds=position+[position[0] + height, position[1] + width]\n        )\n        self.add_layer(image)\n\n    def add_toolbar(self, position=\"topright\"):\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"info\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Add center (Lat, Lon), zoom</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>_type_</code> <p>description</p> required <code>zoom</code> <code>_type_</code> <p>description</p> required Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def __init__(self, **kwargs) -&gt; None:\n\"\"\"Add center (Lat, Lon), zoom\n\n    Args:\n        center (_type_): _description_\n        zoom (_type_): _description_\n    \"\"\"   \n    if \"center\" not in kwargs:\n        kwargs[\"center\"] = [40, -100]\n\n    if \"zoom\" not in kwargs:\n        kwargs[\"zoom\"] = 4        \n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"]=True\n    super().__init__(**kwargs)\n\n    if \"layers_control\" not in kwargs:\n        kwargs[\"layers_control\"] = True\n    if kwargs[\"layers_control\"]:\n        self.add_layers_control()\n    if \"fullscreen_control\" not in kwargs:\n        kwargs[\"fullscreen_control\"] = True\n    if \"fullscreen_control\":\n        self.add_fullscreen_control(position=\"topleft\")\n    self.add_draw_control()\n    self.add_search_control(position=\"topleft\")\n    self.add_toolbar(position=\"topright\")\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map. Args:      kwargs: Keyword arguments to pass to the draw control</p> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_draw_control(self,**kwargs):\n\"\"\"Adds a draw control to the map.\n    Args: \n        kwargs: Keyword arguments to pass to the draw control\n    \"\"\"        \n    draw_control = ipyleaflet.DrawControl(**kwargs)\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    self.add_control(draw_control)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Add a fullscreen control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>description. Defaults to \"topleft\".</p> <code>'topleft'</code> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Add a fullscreen control to the map\n\n    Args:\n        position (str, optional): _description_. Defaults to \"topleft\".\n    \"\"\"        \n    fullscreen_control=ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data</p> required Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_geojson(self, data, name=\"GeoJSON\",**kwargs): \n\"\"\"Adds a GeoJSON layer to the map\n\n    Args:\n        data (dict): The GeoJSON data\n    \"\"\"    \n    if isinstance(data,str):\n        import json\n        with open(data, \"r\") as f:\n            data = json.load(f)    \n    geojson = ipyleaflet.GeoJSON(data=data, name=name,**kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_image","title":"<code>add_image(self, url, width, height, position)</code>","text":"<p>Adds an image to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image</p> required <code>width</code> <code>int</code> <p>The width of the image</p> required <code>height</code> <code>int</code> <p>The height of the image</p> required <code>position</code> <code>list</code> <p>The position of the image</p> required Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_image(self, url, width, height, position):\n\"\"\"Adds an image to the map\n\n    Args:\n        url (str): The URL of the image\n        width (int): The width of the image\n        height (int): The height of the image\n        position (list): The position of the image\n    \"\"\"        \n    image = ipyleaflet.ImageOverlay(\n        url=url,\n        bounds=position+[position[0] + height, position[1] + width]\n    )\n    self.add_layer(image)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright', **kwargs)</code>","text":"<p>Add a layers control to the map.  Args:      kwargs: Keyword arguments to pass to the layers control</p> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_layers_control(self, position=\"topright\", **kwargs):\n\"\"\"Add a layers control to the map. \n    Args: \n        kwargs: Keyword arguments to pass to the layers control\n    \"\"\"        \n    layers_control = ipyleaflet.LayersControl(position=position,**kwargs)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster layer. Defaults to True.</p> <code>True</code> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n    Args:\n        url (str): The URL of the raster layer.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }, \n        verify=False # Added this to address SSL certificate missing temporarily\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        },\n        verify=False # Added this to address SSL certificate missing temporarily\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Add Search Control button </p> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_search_control(self, position=\"topleft\",**kwargs):\n\"\"\"Add Search Control button \n    \"\"\"        \n    if \"url\" not in kwargs:\n        kwargs['url'] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Add a Shapefile layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The Path to the Shapefile</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to \"Shapefile\".</p> <code>'Shapefile'</code> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_shp(self, data, name=\"Shapefile\", **kwargs):\n\"\"\"Add a Shapefile layer to the map\n\n    Args:\n        data (str): The Path to the Shapefile\n        name (str, optional): Name of the layer. Defaults to \"Shapefile\".\n    \"\"\"        \n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution, **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>_type_</code> <p>description</p> required <code>attribution</code> <code>_type_</code> <p>description</p> required Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def add_tile_layer(self, url, name, attribution,**kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (_type_): _description_\n        name (_type_): _description_\n        attribution (_type_): _description_\n    \"\"\"        \n    tile_layer = ipyleaflet.TileLayer(\n        url=url,\n        name=name,\n        attribution=attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>Generate a random string of a given length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>_type_</code> <p>Digits of a defined length</p> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def generate_lucky_number(length=1):\n\"\"\"Generate a random string of a given length\n\n    Args:\n        length (int, optional): _description_. Defaults to 1.\n\n    Returns:\n        _type_: Digits of a defined length\n    \"\"\"    \n    result_str = ''.join(random.choice(string.digits) for i in range(length))\n    return int(result_str)\n</code></pre>"},{"location":"pyrcgeos/#pyrcgeos.pyrcgeos.generate_random_string","title":"<code>generate_random_string(length=10, upper=False, digits=False, punctuation=False)</code>","text":"<p>Generate a random string of a given length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description. Defaults to 10.</p> <code>10</code> <code>upper</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <code>punctuation</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>_type_</code> <p>The generated string</p> Source code in <code>pyrcgeos/pyrcgeos.py</code> <pre><code>def generate_random_string(length=10, upper=False, digits=False, punctuation=False):\n\"\"\"Generate a random string of a given length\n\n    Args:\n        length (int, optional): _description_. Defaults to 10.\n        upper (bool, optional): _description_. Defaults to False.\n        digits (bool, optional): _description_. Defaults to False.\n        punctuation (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        _type_: The generated string\n    \"\"\"    \n    letters = string.ascii_lowercase\n    if upper:\n        letters += string.ascii_lowercase\n    if digits:\n        letters += string.digits\n    if punctuation:\n        letters += string.punctuation\n    #print(letters)\n    return ''.join(random.choice(letters) for i in range(length))\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use pyrcgeos in a project:</p> <pre><code>import pyrcgeos\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[6]: Copied! In\u00a0[1]: Copied! <pre>import pyrcgeos.foliumap as pyrcgeos\n</pre> import pyrcgeos.foliumap as pyrcgeos In\u00a0[2]: Copied! <pre>url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n</pre> url = 'http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' In\u00a0[3]: Copied! <pre>m = pyrcgeos.Map(center=(40.71, -74.01), zoom=12)\nm.add_tile_layer(url=url,name=\"Satellite\", attribution=\"Google\")\nm\n</pre> m = pyrcgeos.Map(center=(40.71, -74.01), zoom=12) m.add_tile_layer(url=url,name=\"Satellite\", attribution=\"Google\") m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[4]: Copied! <pre>import folium\nm = folium.Map(location=[45.52,-122.67],zoom_start=5)\nm\n</pre> import folium m = folium.Map(location=[45.52,-122.67],zoom_start=5) m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre>m\n</pre> m Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre># Install the library when running this in Colab. Uncomment below and run the cell once\n# %pip install git+https://github.com/rcgeos/pyrcgeos.git\n</pre> # Install the library when running this in Colab. Uncomment below and run the cell once # %pip install git+https://github.com/rcgeos/pyrcgeos.git In\u00a0[2]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[3]: Copied! <pre>pyrcgeos.generate_random_string(16)\n</pre> pyrcgeos.generate_random_string(16) Out[3]: <pre>'gdnpnlddpsdrbpfl'</pre> In\u00a0[4]: Copied! <pre>pyrcgeos.generate_lucky_number(7)\n</pre> pyrcgeos.generate_lucky_number(7) Out[4]: <pre>8181927</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[2]: Copied! <pre>import ipyleaflet\n</pre> import ipyleaflet In\u00a0[3]: Copied! <pre>m=pyrcgeos.Map()\nm\n</pre> m=pyrcgeos.Map() m Out[3]: In\u00a0[4]: Copied! <pre>url=\"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z} \"\n</pre> url=\"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z} \" In\u00a0[5]: Copied! <pre>m.add_tile_layer(url=url, name=\"Gmap\", attribution=\"Google\")\n</pre> m.add_tile_layer(url=url, name=\"Gmap\", attribution=\"Google\") In\u00a0[6]: Copied! <pre>import xyzservices.providers as xyz\n</pre> import xyzservices.providers as xyz In\u00a0[7]: Copied! <pre>m.add_basemap('CartoDB.DarkMatter')\n</pre> m.add_basemap('CartoDB.DarkMatter') In\u00a0[8]: Copied! <pre>m.add_geojson('data/samples.geojson')\n</pre> m.add_geojson('data/samples.geojson') In\u00a0[9]: Copied! <pre>m.add_shp('data/countries.shp',name=\"Countries\")\n</pre> m.add_shp('data/countries.shp',name=\"Countries\")"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"In\u00a0[1]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[2]: Copied! <pre>#import leafmap\n</pre> #import leafmap In\u00a0[3]: Copied! <pre>#m=leafmap.Map()\n#m\n</pre> #m=leafmap.Map() #m In\u00a0[4]: Copied! <pre>m=pyrcgeos.Map()\nm\n</pre> m=pyrcgeos.Map() m Out[4]: In\u00a0[5]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name=\"oil-spill\", attribution=\"digital globe\")\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name=\"oil-spill\", attribution=\"digital globe\") In\u00a0[6]: Copied! <pre>m.layers\n</pre> m.layers Out[6]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(attribution='digital globe', name='oil-spill', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'))</pre> In\u00a0[7]: Copied! <pre>m.layers[-1].opacity = 1\n</pre> m.layers[-1].opacity = 1 In\u00a0[8]: Copied! <pre>m.layers[-1].interact(opacity=(0,1,0.1))\n</pre> m.layers[-1].interact(opacity=(0,1,0.1)) Out[8]: In\u00a0[9]: Copied! <pre>from ipyleaflet import WidgetControl\nimport ipywidgets as widgets\n</pre> from ipyleaflet import WidgetControl import ipywidgets as widgets In\u00a0[10]: Copied! <pre>slider = widgets.FloatSlider(value=0.9, min=0, max=1)\nslider\n</pre> slider = widgets.FloatSlider(value=0.9, min=0, max=1) slider Out[10]: In\u00a0[11]: Copied! <pre>widgets.jslink((slider, 'value'),(m.layers[-1],'opacity'))\n</pre> widgets.jslink((slider, 'value'),(m.layers[-1],'opacity')) Out[11]: <pre>Link(source=(FloatSlider(value=0.9, max=1.0), 'value'), target=(TileLayer(attribution='digital globe', name='oil-spill', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'), 'opacity'))</pre> In\u00a0[12]: Copied! <pre>control = WidgetControl(widget=slider, position=\"bottomright\")\n</pre> control = WidgetControl(widget=slider, position=\"bottomright\") In\u00a0[13]: Copied! <pre>m.add(control)\n</pre> m.add(control) Out[13]:"},{"location":"examples/pyrcgeos/","title":"Pyrcgeos","text":"In\u00a0[1]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[2]: Copied! <pre>m = pyrcgeos.Map(center=[60,-100], zoom=3)\nm\n</pre> m = pyrcgeos.Map(center=[60,-100], zoom=3) m Out[2]: In\u00a0[3]: Copied! <pre>m.add_basemap('Esri.WorldImagery')\nm.add_basemap('roadmap')\nm.add_basemap('satellite')\n</pre> m.add_basemap('Esri.WorldImagery') m.add_basemap('roadmap') m.add_basemap('satellite') In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[4]: Copied! <pre>m.add_geojson('data/samples.geojson')\n</pre> m.add_geojson('data/samples.geojson') In\u00a0[5]: Copied! <pre>m.add_shp('data/countries.zip', name=\"Countries\")\n</pre> m.add_shp('data/countries.zip', name=\"Countries\")"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[2]: Copied! <pre># from localtileserver import TileClient, get_leaflet_tile_layer, examples\n# from ipyleaflet import Map\n\n# # Create a TileClient from a raster file\n# client = TileClient('data/landsat7.tif')\n# client = examples.get_san_francisco()  # use example data\n\n# # Create ipyleaflet TileLayer from that server\n# t = get_leaflet_tile_layer(client)\n# # Create ipyleaflet map, add tile layer, and display\n# m = Map(center=client.center(), zoom=client.default_zoom)\n# m.add_layer(t)\n# m\n</pre> # from localtileserver import TileClient, get_leaflet_tile_layer, examples # from ipyleaflet import Map  # # Create a TileClient from a raster file # client = TileClient('data/landsat7.tif') # client = examples.get_san_francisco()  # use example data  # # Create ipyleaflet TileLayer from that server # t = get_leaflet_tile_layer(client) # # Create ipyleaflet map, add tile layer, and display # m = Map(center=client.center(), zoom=client.default_zoom) # m.add_layer(t) # m In\u00a0[3]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[4]: Copied! <pre>url2 = \"https://github.com/opengeos/data/raw/main/raster/landsat7.tif\"\n</pre> url2 = \"https://github.com/opengeos/data/raw/main/raster/landsat7.tif\" In\u00a0[5]: Copied! <pre>m = pyrcgeos.Map()\nm\n</pre> m = pyrcgeos.Map() m Out[5]: In\u00a0[6]: Copied! <pre>m.add_raster(url, name=\"oil-spill\", attribution=\"digital globe\")\n</pre> m.add_raster(url, name=\"oil-spill\", attribution=\"digital globe\") In\u00a0[7]: Copied! <pre>m.add_raster(url2, name=\"Landsat 7\", attribution=\"Landsat\")\n</pre> m.add_raster(url2, name=\"Landsat 7\", attribution=\"Landsat\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"samples/Untitled/","title":"Untitled","text":"In\u00a0[1]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[2]: Copied! <pre>m = pyrcgeos.Map()\nm\n</pre> m = pyrcgeos.Map() m Out[2]: In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"samples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[1]: Copied! <pre># !pip install geosdemo\n</pre> # !pip install geosdemo In\u00a0[2]: Copied! <pre>import pyrcgeos\n</pre> import pyrcgeos In\u00a0[3]: Copied! <pre>m = pyrcgeos.Map()\nm\n</pre> m = pyrcgeos.Map() m Out[3]: In\u00a0[4]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name='Raster', attribution=\"Digital Globe\", fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name='Raster', attribution=\"Digital Globe\", fit_bounds=True) In\u00a0[5]: Copied! <pre>control=WidgetControl(widget=widget, position='bottomright')\n</pre> control=WidgetControl(widget=widget, position='bottomright') <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 control=WidgetControl(widget=widget, position='bottomright')\n\nNameError: name 'WidgetControl' is not defined</pre> In\u00a0[6]: Copied! <pre>m.add(control)\n</pre> m.add(control) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 m.add(control)\n\nNameError: name 'control' is not defined</pre> In\u00a0[7]: Copied! <pre>m.layers\n</pre> m.layers Out[7]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(attribution='Digital Globe', name='Raster', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'))</pre> In\u00a0[8]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) Out[8]: In\u00a0[9]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[10]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000,\n    min=1984,\n    max=2020,\n    step=1,\n    description='Year:'\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000,     min=1984,     max=2020,     step=1,     description='Year:' ) int_slider Out[10]: In\u00a0[11]: Copied! <pre>int_slider.value\n</pre> int_slider.value Out[11]: <pre>2000</pre> In\u00a0[12]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0,\n    min=-1,\n    max=1,\n    step=0.05,\n    description='Threshold:'\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0,     min=-1,     max=1,     step=0.05,     description='Threshold:' ) float_slider Out[12]: In\u00a0[13]: Copied! <pre>float_slider.value\n</pre> float_slider.value Out[13]: <pre>0.0</pre> In\u00a0[14]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    orientation='horizontal'\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description='Loading:',     bar_style='', # 'success', 'info', 'warning', 'danger' or ''     orientation='horizontal' ) int_progress Out[14]: In\u00a0[15]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description='Any:',\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description='Any:', ) int_text Out[15]: In\u00a0[16]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    description='Any:',\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     description='Any:', ) float_text Out[16]: In\u00a0[17]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='success', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description='Click me',     disabled=False,     button_style='success', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Description',     icon='check' # (FontAwesome names without the `fa-` prefix) ) toggle_button Out[17]: In\u00a0[18]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value Out[18]: <pre>False</pre> In\u00a0[19]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False,     description='Check me',     disabled=False,     indent=False ) checkbox Out[19]: In\u00a0[20]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[20]: <pre>False</pre> In\u00a0[21]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) dropdown Out[21]: In\u00a0[22]: Copied! <pre>dropdown.value\n</pre> dropdown.value Out[22]: <pre>'Canada'</pre> In\u00a0[23]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) radio_buttons Out[23]: In\u00a0[24]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value Out[24]: <pre>'Canada'</pre> In\u00a0[25]: Copied! <pre>text = widgets.Text(\n    value='USA',\n    placeholder='Enter a country name',\n    description='Country:',\n    disabled=False\n)\ntext\n</pre> text = widgets.Text(     value='USA',     placeholder='Enter a country name',     description='Country:',     disabled=False ) text Out[25]: In\u00a0[26]: Copied! <pre>text.value\n</pre> text.value Out[26]: <pre>'USA'</pre> In\u00a0[27]: Copied! <pre>widgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n</pre> widgets.Textarea(     value='Hello World',     placeholder='Type something',     description='String:',     disabled=False ) Out[27]: In\u00a0[28]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder='Some HTML',     description='Some HTML', ) Out[28]: In\u00a0[29]: Copied! <pre>url = \"https://earthengine.google.com/static/images/earth-engine-logo.png\"\n</pre> url = \"https://earthengine.google.com/static/images/earth-engine-logo.png\" In\u00a0[30]: Copied! <pre>url = \"https://images.freeimages.com/images/large-previews/09e/moon-art-1641879.png\"\n</pre> url = \"https://images.freeimages.com/images/large-previews/09e/moon-art-1641879.png\" In\u00a0[31]: Copied! <pre>widgets.HTML(\n    value=f'&lt;img src=\"{url}\" width=\"200\" height=\"200\"&gt;'\n)\n</pre> widgets.HTML(     value=f'' ) Out[31]: In\u00a0[32]: Copied! <pre>html = \"\"\" &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;h2&gt;HTML Images&lt;/h2&gt;\n&lt;p&gt;HTML images are defined with the img tag:&lt;/p&gt;\n\n&lt;img src=\"https://images.freeimages.com/images/large-previews/09e/moon-art-1641879.png\" alt=\"W3Schools.com\" width=\"100\" height=\"100\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\"\"\"\n</pre> html = \"\"\"  HTML Images <p>HTML images are defined with the img tag:</p> \"\"\" In\u00a0[33]: Copied! <pre>widget = widgets.HTML(\n    value=html\n)\n</pre> widget = widgets.HTML(     value=html ) In\u00a0[34]: Copied! <pre>button = widgets.Button(\n    description='Click me',\n    button_style='info', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n</pre> button = widgets.Button(     description='Click me',     button_style='info', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Click me',     icon='check' # (FontAwesome names without the `fa-` prefix) ) button Out[34]: In\u00a0[35]: Copied! <pre>date_picker = widgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\ndate_picker\n</pre> date_picker = widgets.DatePicker(     description='Pick a Date',     disabled=False ) date_picker Out[35]: In\u00a0[36]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[37]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False,     description='Pick a color',     value='blue',     disabled=False ) color_picker Out[37]: In\u00a0[38]: Copied! <pre>color_picker.value\n</pre> color_picker.value Out[38]: <pre>'blue'</pre> In\u00a0[39]: Copied! <pre>out = widgets.Output(layout={'border': '1px solid black'})\nout\n</pre> out = widgets.Output(layout={'border': '1px solid black'}) out Out[39]: In\u00a0[40]: Copied! <pre>with out:\n    for i in range(10):\n        print(i, 'Hello world!')\n</pre> with out:     for i in range(10):         print(i, 'Hello world!') In\u00a0[41]: Copied! <pre>from IPython.display import YouTubeVideo\nout.clear_output()\nwith out:\n    display(YouTubeVideo('mA21Us_3m28'))\nout\n</pre> from IPython.display import YouTubeVideo out.clear_output() with out:     display(YouTubeVideo('mA21Us_3m28')) out Out[41]: In\u00a0[42]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out Out[42]: In\u00a0[43]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[44]: Copied! <pre>m = pyrcgeos.Map()\nm\n</pre> m = pyrcgeos.Map() m Out[44]: In\u00a0[45]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_control = WidgetControl(widget=output_widget, position='bottomright')\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_control = WidgetControl(widget=output_widget, position='bottomright') m.add_control(output_control) In\u00a0[46]: Copied! <pre>with output_widget:\n    print('Nice map!')\n</pre> with output_widget:     print('Nice map!') In\u00a0[47]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[48]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get('coordinates')\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get('type') == 'click':\n        with output_widget:\n            output_widget.clear_output()\n            print('Location: {}'.format(latlon))\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get('coordinates')     # latlon = [round(x, 2) for x in latlon]     if kwargs.get('type') == 'click':         with output_widget:             output_widget.clear_output()             print('Location: {}'.format(latlon))  m.on_interaction(handle_interaction) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"samples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"samples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"samples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"samples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"samples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"samples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"samples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"samples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"samples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"samples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"samples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"samples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"samples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"samples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"samples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"samples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"samples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"samples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"samples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"samples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"samples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"samples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"samples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"samples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[1]: Copied! <pre># import geemap\n# Map = geemap.Map()\n# Map\n</pre> # import geemap # Map = geemap.Map() # Map In\u00a0[2]: Copied! <pre>import ipywidgets as widgets\nimport ipyleaflet\nimport pyrcgeos\n</pre> import ipywidgets as widgets import ipyleaflet import pyrcgeos In\u00a0[3]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[4]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Tooltip\",\n    icon=\"gear\",\n    #button_style=\"info\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Tooltip\",     icon=\"gear\",     #button_style=\"info\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button Out[4]: In\u00a0[5]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[6]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[6]: <pre>False</pre> In\u00a0[7]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button Out[7]: In\u00a0[8]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) Out[8]: In\u00a0[9]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box Out[9]: In\u00a0[10]: Copied! <pre>#box.children=[toolbar_button,close_button]\n</pre> #box.children=[toolbar_button,close_button] In\u00a0[11]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox Out[11]: In\u00a0[12]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown Out[12]: In\u00a0[13]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=100,\n    description=\"Int Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=100,     description=\"Int Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider Out[13]: In\u00a0[14]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) In\u00a0[15]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color Out[15]: In\u00a0[16]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text Out[16]: In\u00a0[17]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea Out[17]: In\u00a0[18]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons Out[18]: In\u00a0[19]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output Out[19]: In\u00a0[20]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget Out[20]: In\u00a0[21]: Copied! <pre>control=ipyleaflet.WidgetControl(widget=toolbar_widget, position='topright')\n</pre> control=ipyleaflet.WidgetControl(widget=toolbar_widget, position='topright') In\u00a0[22]: Copied! <pre>m=ipyleaflet.Map(center=[40,-100], zoom=4)\n</pre> m=ipyleaflet.Map(center=[40,-100], zoom=4) In\u00a0[23]: Copied! <pre>m.add(control)\n</pre> m.add(control) Out[23]:"},{"location":"samples/ipywidgets_events/","title":"Ipywidgets events","text":"In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[2]: Copied! <pre>print(widgets.Button.on_click.__doc__)\n</pre> print(widgets.Button.on_click.__doc__) <pre>Register a callback to execute when the button is clicked.\n\n        The callback will be called with one argument, the clicked button\n        widget instance.\n\n        Parameters\n        ----------\n        remove: bool (optional)\n            Set to true to remove the callback from the list of callbacks.\n        \n</pre> In\u00a0[3]: Copied! <pre>button = widgets.Button(description=\"Click Me!\", button_style=\"primary\")\noutput = widgets.Output()\n\ndef on_button_clicked(b):\n    with output:\n        print(\"Button clicked.\")\n\nbutton.on_click(on_button_clicked)\n\nwidgets.VBox([button, output])\n</pre> button = widgets.Button(description=\"Click Me!\", button_style=\"primary\") output = widgets.Output()  def on_button_clicked(b):     with output:         print(\"Button clicked.\")  button.on_click(on_button_clicked)  widgets.VBox([button, output]) Out[3]: In\u00a0[4]: Copied! <pre>print(widgets.Widget.observe.__doc__)\n</pre> print(widgets.Widget.observe.__doc__) <pre>Setup a handler to be called when a trait changes.\n\n        This is used to setup dynamic notifications of trait changes.\n\n        Parameters\n        ----------\n        handler : callable\n            A callable that is called when a trait changes. Its\n            signature should be ``handler(change)``, where ``change`` is a\n            dictionary. The change dictionary at least holds a 'type' key.\n            * ``type``: the type of notification.\n            Other keys may be passed depending on the value of 'type'. In the\n            case where type is 'change', we also have the following keys:\n            * ``owner`` : the HasTraits instance\n            * ``old`` : the old value of the modified trait attribute\n            * ``new`` : the new value of the modified trait attribute\n            * ``name`` : the name of the modified trait attribute.\n        names : list, str, All\n            If names is All, the handler will apply to all traits.  If a list\n            of str, handler will apply to all names in the list.  If a\n            str, the handler will apply just to that name.\n        type : str, All (default: 'change')\n            The type of notification to filter by. If equal to All, then all\n            notifications are passed to the observe handler.\n        \n</pre> In\u00a0[5]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Show\", \"Hide\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\n\nhtml = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n\nvbox = widgets.VBox([buttons, html])\nvbox\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Show\", \"Hide\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\"  html = widgets.HTML(     value='' )  vbox = widgets.VBox([buttons, html]) vbox Out[5]: In\u00a0[6]: Copied! <pre>def handle_btn_click(change):\n    \n    if change['new'] == 'Show':\n        vbox.children = [buttons, html]\n    elif change['new'] == 'Hide':\n        vbox.children = [buttons]\n    elif change['new'] == 'Close':\n        buttons.close()\n        html.close()\n        vbox.close()\n        \nbuttons.observe(handle_btn_click, \"value\")\n</pre> def handle_btn_click(change):          if change['new'] == 'Show':         vbox.children = [buttons, html]     elif change['new'] == 'Hide':         vbox.children = [buttons]     elif change['new'] == 'Close':         buttons.close()         html.close()         vbox.close()          buttons.observe(handle_btn_click, \"value\") In\u00a0[7]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Landsat\", \"Sentinel\", \"MODIS\"],\n    value=None,\n    description=\"Satellite:\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=\"250px\")\n)\n\nbtns = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbtns.style.button_width = \"80px\"\n\noutput = widgets.Output()\n\nbox = widgets.VBox([dropdown, btns, output])\nbox\n</pre> dropdown = widgets.Dropdown(     options=[\"Landsat\", \"Sentinel\", \"MODIS\"],     value=None,     description=\"Satellite:\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=\"250px\") )  btns = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) btns.style.button_width = \"80px\"  output = widgets.Output()  box = widgets.VBox([dropdown, btns, output]) box Out[7]: In\u00a0[8]: Copied! <pre>def dropdown_change(change):\n    if change['new']:\n        with output:\n            output.clear_output()\n            print(change['new'])\n            \ndropdown.observe(dropdown_change, \"value\")\n</pre> def dropdown_change(change):     if change['new']:         with output:             output.clear_output()             print(change['new'])              dropdown.observe(dropdown_change, \"value\") In\u00a0[9]: Copied! <pre>def button_click(change):\n    with output:\n        output.clear_output()\n        if change['new'] == \"Apply\":\n            if dropdown.value is None:\n                print(\"Please select a satellite from the dropdown list.\")\n            else:\n                print(f\"You selected {dropdown.value}\")\n        elif change['new'] == 'Reset':\n            dropdown.value = None\n        else:\n            box.close()\n            \nbtns.observe(button_click, \"value\")\n</pre> def button_click(change):     with output:         output.clear_output()         if change['new'] == \"Apply\":             if dropdown.value is None:                 print(\"Please select a satellite from the dropdown list.\")             else:                 print(f\"You selected {dropdown.value}\")         elif change['new'] == 'Reset':             dropdown.value = None         else:             box.close()              btns.observe(button_click, \"value\")"},{"location":"samples/ipywidgets_events/#button-event","title":"Button event\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#</p>"},{"location":"samples/ipywidgets_events/#other-widget-events","title":"Other widget events\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#Traitlet-events</p>"},{"location":"samples/ipywidgets_events/#first-example","title":"First example\u00b6","text":""},{"location":"samples/ipywidgets_events/#second-example","title":"Second example\u00b6","text":""},{"location":"samples/ipywidgets_events/#third-example","title":"Third example\u00b6","text":"<ul> <li>https://leafmap.org/notebooks/02_using_basemaps/</li> </ul>"},{"location":"samples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>#import geosdemo\nimport pyrcgeos\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> #import geosdemo import pyrcgeos import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[2]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[3]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar Out[3]: In\u00a0[4]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[5]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar Out[5]: In\u00a0[6]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[7]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"area-chart\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"area-chart\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid Out[7]: In\u00a0[8]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[9]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar Out[9]: In\u00a0[10]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[11]: Copied! <pre>m = pyrcgeos.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = pyrcgeos.Map() m.add_control(toolbar_ctrl) m Out[11]: In\u00a0[12]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) In\u00a0[13]: Copied! <pre>with output:\n    output.clear_output()\n    print(\"Hello world\")\n</pre> with output:     output.clear_output()     print(\"Hello world\") In\u00a0[14]: Copied! <pre>basemap = widgets.Dropdown(\n    options=[\"OpenStreetMap\", \"Satellite\", \"Roadmap\"],\n    value=None,\n    description=\"Basemap:\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=\"250px\")\n)\nbasemap\n</pre> basemap = widgets.Dropdown(     options=[\"OpenStreetMap\", \"Satellite\", \"Roadmap\"],     value=None,     description=\"Basemap:\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=\"250px\") ) basemap Out[14]: In\u00a0[15]: Copied! <pre>basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")\n</pre> basemap_ctrl = WidgetControl(widget=basemap, position=\"topright\")  In\u00a0[16]: Copied! <pre>def change_basemap(change):\n    if change['new']:\n        with output:\n            output.clear_output()\n            #print(basemap)\n        m.add_basemap(basemap.value)\n</pre> def change_basemap(change):     if change['new']:         with output:             output.clear_output()             #print(basemap)         m.add_basemap(basemap.value) In\u00a0[17]: Copied! <pre>basemap.observe(change_basemap, 'value')\n</pre> basemap.observe(change_basemap, 'value') In\u00a0[18]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n        if b.icon == \"map\":\n            if basemap_ctrl not in m.controls: \n                m.add(basemap_ctrl)\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\")         if b.icon == \"map\":             if basemap_ctrl not in m.controls:                  m.add(basemap_ctrl) In\u00a0[19]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[20]: Copied! <pre>#def tool_click(b):    \n#    with output:\n#        output.clear_output()\n#        print(f\"You clicked the {b.icon} button\")\n</pre> #def tool_click(b):     #    with output: #        output.clear_output() #        print(f\"You clicked the {b.icon} button\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"samples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"samples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"samples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"samples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""}]}